import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class B8979_올림픽_1 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		Score[] s = new Score[N];
		for (int n = 0; n < N; n++) {
			st = new StringTokenizer(br.readLine());
			s[n] = new Score(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()),
					Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
		}
		Arrays.sort(s);
		int ans = 0;
		for (int n = 0; n < N; n++) {
			if (s[n].idx == K) {
				int t = n;
				int o = n;
				if (t == 0) {
					ans = 1;
					break;
				}
				while (true) {

					if (s[t].compareTo(s[--o]) != 0) {
						ans = o + 2;
						break;
					}
				}
				break;
			}
		}
		System.out.println(ans);

	}

	static class Score implements Comparable<Score> {
		int idx, g, s, b;

		public Score(int idx, int g, int s, int b) {
			super();
			this.idx = idx;
			this.g = g;
			this.s = s;
			this.b = b;
		}

		@Override
		public int compareTo(Score o) {
			int gScore = this.g - o.g;
			if (gScore == 0) {
				int sScore = this.s - o.s;
				if (sScore == 0) {
					return this.b - o.b;
				} else
					return sScore;
			} else
				return gScore;
		}

	}
}
