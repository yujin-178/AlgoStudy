import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class B1194_달이차오른다가자_1 {
	static int N, M, minDist;
	static char[][] map;
	static boolean[] key = new boolean[6];
	static int[] dr = { -1, 0, 1, 0 };
	static int[] dc = { 0, 1, 0, -1 };

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new char[N][M];
		int sr = 0, sc = 0;
		for (int r = 0; r < N; r++) {
			String tmp = br.readLine();
			for (int c = 0; c < M; c++) {
				map[r][c] = tmp.charAt(c);
				if (map[r][c] == '0') {
					sr = r;
					sc = c;
					map[r][c] = '.';
				}
			}
		}

		minDist = Integer.MAX_VALUE;
		bfs(sr, sc);

		System.out.println(minDist);

	}

	static void bfs(int r, int c) {
		Queue

	}

	static void pickUpKey(int r, int c) {
		key[map[r][c] - 'a'] = true;
	}

	static boolean openDoor(int r, int c) {
		if (key[map[r][c] - 'A'])
			return true;
		return false;
	}

	static boolean moveable(int r, int c) {
		if (r < 0 || r >= N || c < 0 || c >= N || map[r][c] == '#')
			return false;
		return true;
	}

	static class MinSik {
		int r, c;
		boolean[] key;

		public MinSik(int r, int c) {
			super();
			this.r = r;
			this.c = c;
			this.key = new boolean[6];
		}

		public MinSik(int r, int c, MinSik m) {
			super();
			this.r = r;
			this.c = c;
			this.key = new boolean[6];
			for (int i = 0; i < 6; i++) {
				if (m.key[i])
					this.key[i] = true;
			}

		}

	}

}
