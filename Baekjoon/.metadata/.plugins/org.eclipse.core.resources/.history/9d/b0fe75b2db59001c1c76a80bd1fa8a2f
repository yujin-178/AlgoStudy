import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class B2213_트리의독립집합 {
	static int N, idx;
	static int[][] DP;
	static Node[] node;
	static int[] w;

	public static void main(String[] args) throws IOException {
		System.setIn(new FileInputStream("2213_input"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());

		w = new int[N + 1];
		node = new Node[N + 1];
		st = new StringTokenizer(br.readLine());
		for (int i = 1; i <= N; i++) {
			w[i] = Integer.parseInt(st.nextToken());
			node[i] = new Node();
		}
		for (int i = 0; i < N - 1; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int start = Math.min(a, b);
			int end = Math.max(a, b);
			node[start].child.add(end);
			node[end].parents = start;
		}

		DP = new int[N + 1][2];
		PriorityQueue<Integer>[] ans = (dfs(1));

		System.out.println(ans[0].toString());
		System.out.println(ans[1].toString());

	}

	static PriorityQueue<Integer>[] dfs(int i) {
		if (node[i].child.isEmpty()) {
			DP[i][0] = 0;
			DP[i][1] = w[i];
			PriorityQueue<Integer>[] pq = new PriorityQueue[2];
			pq[1].add(i);
			return pq;
		} else if (node[i].child.size() == 1) {
			int next = node[i].child.get(0);
			PriorityQueue<Integer>[] tmp = dfs(next);
			if (DP[next][0] > DP[next][1]) {
				DP[i][0] = DP[next][0];
			} else {
				DP[i][0] = DP[next][1];
			}
			DP[i][1] = w[i] + DP[next][0];
			tmp[1].add(i);

			return tmp;
		} else {

		}

	}

	static class Node {
		int parents;
		ArrayList<Integer> child;

		public Node() {
			super();
			this.parents = -1;
			this.child = new ArrayList<>();
		}

	}

}
