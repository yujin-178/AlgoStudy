import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class S4014_활주로건설_1 {
	static int N, X;
	static int[][] map;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int T = Integer.parseInt(st.nextToken());
		for (int tc = 1; tc <= T; tc++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			X = Integer.parseInt(st.nextToken());
			map = new int[N][N];

			for (int r = 0; r < N; r++) {
				st = new StringTokenizer(br.readLine());
				for (int c = 0; c < N; c++) {
					map[r][c] = Integer.parseInt(st.nextToken());
				}
			}
			int ans = 0;
			for (int r = 0; r < N; r++) {
				if (rowSearch(r))
					ans++;
			}
			for (int c = 0; c < N; c++) {
				if (colSearch(c))
					ans++;
			}
			System.out.println("#" + tc + " " + ans);
		}

	}

	static boolean rowSearch(int r) {
		int exH = map[r][0];
		for (int c = 1; c < N; c++) {
			if (map[r][c] == exH) {

			} else {
				if (Math.abs(map[r][c] - exH) > 1)
					return false;
				else if (map[r][c] - exH == 1) {
					for (int i = c; i > c - X; i--) {
						if (i < 0)
							return false;
						if (map[r][c] != exH)
							return false;
					}

				} else {

					for (int i = c; i < c + X; i++) {
						if (i >= N)
							return false;
						if (map[r][c] != exH)
							return false;
					}

				}
				exH = map[r][c];
			}
		}
		return true;
	}

	static boolean colSearch(int c) {
		int exH = map[0][c];
		for (int r = 1; r < N; r++) {
			if (map[r][c] == exH) {
				exH = map[r][c];
			} else {
				if (Math.abs(map[r][c] - exH) > 1)
					return false;
				else if (map[r][c] - exH == 1) {
					for (int i = r; i > r - X; i--) {
						if (i < 0)
							return false;
						if (map[i][c] != exH)
							return false;
					}
				} else {
					for (int i = r; i < r + X; i++) {
						if (i >= N)
							return false;
						if (map[i][c] != exH)
							return false;
					}
				}
			}

		}
		return true;
	}
}
