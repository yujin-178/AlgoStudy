import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class S1249_보급로_2 {
	static int map[][];

	static int N, minCost;
	static int[] dr = { 0, 1, 0, -1 };
	static int[] dc = { -1, 0, 1, 0 };

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());

		for (int tc = 1; tc <= T; tc++) {

			N = Integer.parseInt(br.readLine());
			map = new int[N][N];
			chk = new boolean[N][N];
			for (int r = 0; r < N; r++) {
				String tmp = br.readLine();
				for (int c = 0; c < N; c++) {
					map[r][c] = (int) (tmp.charAt(c) - '0');
				}
			}
			minCost = Integer.MAX_VALUE;
			bfs();

			System.out.println("#" + tc + " " + minCost);
		}
	}

	static void bfs() {
		Queue<Pos> q = new LinkedList<>();
		q.add(new Pos(0, 0));
		boolean chk[][] = new boolean[N][N];
		chk[0][0] = true;
		while (!q.isEmpty()) {
			Pos tmp = q.poll();
			for (int d = 0; d < 4; d++) {
				
			}

		}
	}

	static class Pos {
		int r, c;

		public Pos(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}

	}

	static boolean movealbe(int r, int c) {
		if (r < 0 || r >= N || c < 0 || c >= N || chk[r][c])
			return false;
		return true;
	}
}
