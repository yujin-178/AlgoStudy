import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class S4311_오래된스마트폰_1 {
	static int N, O, M, ans, dep;
	static boolean[] oper;
	static int[] num;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int T = Integer.parseInt(st.nextToken());

		for (int tc = 1; tc <= T; tc++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			O = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());

			num = new int[N];
			oper = new boolean[5];
			st = new StringTokenizer(br.readLine());
			for (int i = 0; i < N; i++) {
				num[i] = Integer.parseInt(st.nextToken());
			}
			st = new StringTokenizer(br.readLine());
			for (int i = 0; i < O; i++) {
				oper[Integer.parseInt(st.nextToken())] = true;
			}
			st = new StringTokenizer(br.readLine());
			ans = Integer.parseInt(st.nextToken());
			dep = Integer.MAX_VALUE;
			System.out.println(N + "  " + O + "  " + M + "  " + ans);
			dfs(0, 0, 0);
			System.out.println("#" + tc + " " + dep);
		}
	}

	static void dfs(int d, int sum, int now) {

		if (sum < 0 || sum > 999)
			return;
		if (sum == ans) {
			dep = Math.min(dep, d);
		}
		if (dep <= d)
			return;
		if (d == M)
			return;
		for (int i = 0; i < N; i++) {
			dfs(d + 1, sum, now * 10 + i);
		}
		if (oper[1]) {
			dfs(d + 1, sum + now, 0);
		}

		if (now != 0) {
			if (oper[2])
				dfs(d + 1, sum - now, 0);
			if (oper[3])
				dfs(d + 1, sum * now, 0);
			if (oper[4])
				dfs(d + 1, sum / now, 0);
		}

	}
}
