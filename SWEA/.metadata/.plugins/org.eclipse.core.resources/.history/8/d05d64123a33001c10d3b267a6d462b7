import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class S4727_견우와직녀_2 {
	static int N, M;
	static int[][] map;
	static int[][] visited;
	static int[] dr = { 1, 0, -1, 0 };
	static int[] dc = { 0, 1, 0, -1 };

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(br.readLine());
			M = Integer.parseInt(br.readLine());
			map = new int[N][N];
			visited = new int[N][N];

			for (int r = 0; r < N; r++) { // map input
				st = new StringTokenizer(br.readLine());
				for (int c = 0; c < N; c++) {
					map[r][c] = Integer.parseInt(br.readLine());
				}
			} // end map input

			for (int r = 0; r < N; r++) { // 교차로 절벽 체크
				for (int c = 0; c < N; c++) {
					if (map[r][c] == 0) {
						boolean row = false;
						boolean col = false;
						for (int d = 0; d < 4; d++) {
							int nr = r + dr[d];
							int nc = c + dc[d];
							if (nr >= 0 && nc >= 0 && nr < N && nc < N && map[nr][nc] == 0) { // 맵을 벗어나지 않고 주변이 절벽인 경우
								if (d == 0 || d == 2) // 종으로 절벽이 있는 경우
									row = true;
								if (d == 1 || d == 3) // 횡으로 절벽이 있는 경우
									col = true;
							}
						}
						if (col && row)
							map[r][c] = -1; // 교차로
					}
				}
			} // end 교차로 절벽 체크

			bfs();

		}

	}

	static int bfs() {
		int time = 1; // 시작 시간 일부러 1부터 시작함
		Queue<Pos> q = new LinkedList<Pos>();
		q.add(new Pos(0, 0, false));
		visited[0][0] = time;
		while (!q.isEmpty()) {

		}

		return time;
	}

	static class Pos {
		int r, c;
		boolean make;

		public Pos(int r, int c, boolean make) {
			this.r = r;
			this.c = c;
			this.make = make;
		}

	}
}
