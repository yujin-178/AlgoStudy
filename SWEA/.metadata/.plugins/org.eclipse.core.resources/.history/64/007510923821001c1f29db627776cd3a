import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.StringTokenizer;


public class S5643_키순서_3 {
	static int N, M, ans;
	static Map<Integer, LinkedList<Integer>> sm;
	static Map<Integer, LinkedList<Integer>> lm;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int T = Integer.parseInt(st.nextToken());

		for (int tc = 1; tc <= T; tc++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			st = new StringTokenizer(br.readLine());
			M = Integer.parseInt(st.nextToken());
			sm = new HashMap<>();
			lm = new HashMap<>();
			for (int m = 0; m < M; m++) {
				st = new StringTokenizer(br.readLine());
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				if (!sm.containsKey(a))
					sm.put(a, new LinkedList<Integer>());
				sm.get(a).add(b);
//				LinkedList<Integer> values1 = sm.get(a);
//				values1.add(b);

				if (!lm.containsKey(b))
					lm.put(b, new LinkedList<Integer>());
				lm.get(b).add(a);
//				LinkedList<Integer> values2 = lm.get(b);
//				values2.add(a);

			}

			for (Integer key : sm.keySet()) {
				for(Integer value : sm.get(key)) {
					System.out.println(key+" : " +value + " ");
				}
			}

//			ans = 0;
//			for (int r = 1; r < N + 1; r++) {
//				boolean[] chk = new boolean[N + 1];
//				dfs(r, 0, chk);
//			}

//			System.out.println("#" + tc + " " + ans);
		}
	}

//	static void dfs(int target, int cnt, boolean[] chk) {
//		if(cnt == N-1) {
//			ans++;
//			return;
//		}
//		
//		for(int i = 0; i<M;i++) {
//			if(e[i].s == target)
//				
//		}
//	}

	static class Edge {
		int s;
		int l;

		public Edge(int s, int l) {
			this.s = s;
			this.l = l;
		}

	}
}
